import 'package:firebase_auth/firebase_auth.dart';import 'package:firebase_database/firebase_database.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:gap/gap.dart';import 'package:google_fonts/google_fonts.dart';import 'package:meddoc/Screens/PatientNavigationBar.dart';import '../DoctorsModel.dart';import '../Models/AppointmentModel.dart';import '../Styles/applayout.dart';import '../Styles/styles.dart';import '../Widgets/DoctorAppointmentContainer.dart';import '../Widgets/LoadingContainer.dart';import '../Widgets/NotFoundContainer.dart';import '../Widgets/TitleContainer.dart';class PatientAppointments extends StatefulWidget {  const PatientAppointments({Key? key}) : super(key: key);  @override  State<PatientAppointments> createState() => _PatientAppointmentsState();}class _PatientAppointmentsState extends State<PatientAppointments> {   List<AppointmentModel> appointmentData=[];   Query bookingQuery=FirebaseDatabase.instance.ref("bookings").orderByChild("patientID").equalTo(FirebaseAuth.instance.currentUser!.uid);   int selected=0;   Color selectedColor=Styles.secondryColor;   Color unselectedColor=Styles.secondryColor;   Color selectedTextColor=Colors.white;   Color unselectedTextColor=Colors.black;@override  void initState() {  getAppointments();  }  @override  Widget build(BuildContext context) {    final size=AppLayout.getSize(context);    return Scaffold(      backgroundColor: Styles.bgColor,      body: Column(        children: [          TitleContainer(title: "Appointments",),          Padding(            padding: EdgeInsets.symmetric(vertical: 22,),            child: Row(              mainAxisAlignment: MainAxisAlignment.spaceEvenly,              children: [                GestureDetector(                  onTap: (){                    setState((){                      selected=0;                    });                  },                  child: Container(                    padding: EdgeInsets.symmetric(vertical: 16,horizontal: 22),                    decoration: BoxDecoration(                      color: selected==0?Styles.secondryColor:Colors.white,                      borderRadius: BorderRadius.circular(22)                    ),                    child: Text("Upcoming",style: GoogleFonts.montserrat(fontSize: 14,fontWeight: FontWeight.w400,color: selected==0?Colors.white:Colors.black),),                  ),                ),                GestureDetector(                  onTap: (){                    setState((){                      selected=1;                    });                  },                  child: Container(                    padding: EdgeInsets.symmetric(vertical: 16,horizontal: 22),                    decoration: BoxDecoration(                      color: selected==1?Styles.secondryColor:Colors.white,                      borderRadius: BorderRadius.circular(22)                    ),                    child: Text("Pending",style: GoogleFonts.montserrat(fontSize: 14,fontWeight: FontWeight.w400,color: selected==1?Colors.white:Colors.black),),                  ),                ),              ],            ),          ),          selected==0?Expanded(            child:  StreamBuilder(                stream: bookingQuery.onValue,                builder: (context,snapshot){                  if(snapshot.hasData){                    if(snapshot.data!.snapshot.children.length<1){                      return NotFoundContainer();                    }                    appointmentData.clear();                    for(DataSnapshot snapshot in snapshot.data!.snapshot.children){                      if(snapshot.child("accepted").value.toString()=="true"){                        AppointmentModel model=AppointmentModel(snapshot.child("end").value.toString(), snapshot.key!, snapshot.child("start").value.toString(), snapshot.child("end").value.toString(), snapshot.child("doctorID").value.toString(), snapshot.child("patientID").value.toString(),snapshot.child("completed").value.toString(),snapshot.child("accepted").value.toString(),);                        appointmentData.add(model);                      }                    }                  }else{                    return LoadingContainer();                  }                  return ListView.builder(                      scrollDirection: Axis.vertical,                      itemCount: appointmentData.length,                      itemBuilder: (BuildContext context, index){                        return Padding(                            padding: EdgeInsets.only(top: 1),                            child: DoctorAppointmentContainer(doctor: false,date: appointmentData.elementAt(index).date,appointID: appointmentData.elementAt(index).appointID,doctorID: appointmentData.elementAt(index).docID,patientID: appointmentData.elementAt(index).patientID,end: appointmentData.elementAt(index).end,start: appointmentData.elementAt(index).start,appointed: true,));                      }                  );                }),          ):Expanded(            child:  StreamBuilder(                stream: bookingQuery.onValue,                builder: (context,snapshot){                  if(snapshot.hasData){                    if(snapshot.data!.snapshot.children.length<1){                      return NotFoundContainer();                    }                    appointmentData.clear();                    for(DataSnapshot snapshot in snapshot.data!.snapshot.children){                      if(snapshot.child("accepted").value.toString()=="false"){                        AppointmentModel model=AppointmentModel(snapshot.child("end").value.toString(), snapshot.key!, snapshot.child("start").value.toString(), snapshot.child("end").value.toString(), snapshot.child("doctorID").value.toString(), snapshot.child("patientID").value.toString(),snapshot.child("completed").value.toString(),snapshot.child("accepted").value.toString(),);                        appointmentData.add(model);                      }                    }                  }else{                    return LoadingContainer();                  }                  return ListView.builder(                      scrollDirection: Axis.vertical,                      itemCount: appointmentData.length,                      itemBuilder: (BuildContext context, index){                        return Padding(                            padding: EdgeInsets.only(top: 1),                            child: DoctorAppointmentContainer(doctor: false,date: appointmentData.elementAt(index).date,appointID: appointmentData.elementAt(index).appointID,doctorID: appointmentData.elementAt(index).docID,patientID: appointmentData.elementAt(index).patientID,end: appointmentData.elementAt(index).end,start: appointmentData.elementAt(index).start,appointed: false,));                      }                  );                }),          ),        ],      ),    );  }  void getAppointments() {  // appointmentData.clear();  // DatabaseReference ref=FirebaseDatabase.instance.ref("bookings");  // Query query=ref.orderByChild("patientID").equalTo(FirebaseAuth.instance.currentUser!.uid);  // Stream<DatabaseEvent> event=query.onValue;  //  // event.listen((event) {  //   for(DataSnapshot snapshot in event.snapshot.children){  //     AppointmentModel model=AppointmentModel(snapshot.child("end").value.toString(), snapshot.key!, snapshot.child("start").value.toString(), snapshot.child("end").value.toString(), snapshot.child("doctorID").value.toString(), snapshot.child("patientID").value.toString());  //     appointmentData.add(model);  //  //   }  //   if(appointmentData.isEmpty){  //     setState(() {  //       found=false;  //     });  //   }  //   else{  //     setState(() {  //       found=true;  //     });  //  //   }  // }).onDone(() {  //  // });  //  }}